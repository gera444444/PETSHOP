from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from typing import List, Dict, Any
import json
import asyncio
import time

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="PetShop", debug=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class Database:
    def __init__(self):
        self.products = [
            {
                "id": 1,
                "name": "–ö–æ—Ä–º –¥–ª—è –∫–æ—à–µ–∫ Premium",
                "category": "food",
                "price": 15.99,
                "description": "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–º –¥–ª—è –≤–∞—à–∏—Ö –ø—É—à–∏—Å—Ç—ã—Ö –¥—Ä—É–∑–µ–π",
                "image": "üê±"
            },
            {
                "id": 2,
                "name": "–ò–≥—Ä—É—à–∫–∞ –¥–ª—è —Å–æ–±–∞–∫",
                "category": "toys",
                "price": 8.50,
                "description": "–ü—Ä–æ—á–Ω–∞—è —Ä–µ–∑–∏–Ω–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±–∞–∫",
                "image": "üê∂"
            },
            {
                "id": 3,
                "name": "–ê–∫–≤–∞—Ä–∏—É–º 50–ª",
                "category": "aquarium",
                "price": 45.00,
                "description": "–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –¥–ª—è —Ä—ã–±–æ–∫",
                "image": "üê†"
            },
            {
                "id": 4,
                "name": "–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –∫–æ—à–∞—á—å–µ–≥–æ —Ç—É–∞–ª–µ—Ç–∞",
                "category": "hygiene",
                "price": 12.75,
                "description": "–î—Ä–µ–≤–µ—Å–Ω—ã–π –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å –∞—Ä–æ–º–∞—Ç–æ–º –ª–∞–≤–∞–Ω–¥—ã",
                "image": "üêà"
            },
            {
                "id": 5,
                "name": "–ü–æ–≤–æ–¥–æ–∫ –¥–ª—è —Å–æ–±–∞–∫",
                "category": "accessories",
                "price": 6.99,
                "description": "–ü—Ä–æ—á–Ω—ã–π –Ω–µ–π–ª–æ–Ω–æ–≤—ã–π –ø–æ–≤–æ–¥–æ–∫ 2 –º–µ—Ç—Ä–∞",
                "image": "ü¶Æ"
            }
        ]
        self.users = []
        self.messages = []

db = Database()

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        print(f"‚úÖ –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –í—Å–µ–≥–æ: {len(self.active_connections)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if db.messages:
            last_messages = db.messages[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            for msg in last_messages:
                try:
                    await websocket.send_text(json.dumps({
                        "username": msg["username"],
                        "message": msg["message"],
                        "type": "message",
                        "timestamp": msg.get("timestamp", time.time())
                    }))
                except:
                    pass
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        print(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.active_connections)}")
    
    async def broadcast(self, message: str):
        if not self.active_connections:
            return
            
        disconnected = []
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)

manager = ConnectionManager()

# –†–æ—É—Ç—ã
@app.get("/")
async def read_root():
    try:
        with open("templates/index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        return HTMLResponse("<h1>PetShop - –ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</h1><p>–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>")

@app.get("/products")
async def get_products(category: str = None):
    if category and category != "all":
        return [p for p in db.products if p["category"] == category]
    return db.products

@app.post("/register")
async def register(user_data: dict):
    username = user_data.get("username", "").strip()
    email = user_data.get("email", "").strip()
    password = user_data.get("password", "").strip()
    
    if not username or not email or not password:
        raise HTTPException(status_code=400, detail="–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    if any(u["username"] == username for u in db.users):
        raise HTTPException(status_code=400, detail="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
    if any(u["email"] == email for u in db.users):
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    user = {
        "id": len(db.users) + 1,
        "username": username,
        "email": email,
        "password": password,
        "created_at": time.time()
    }
    db.users.append(user)
    
    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", "user_id": user["id"]}

@app.post("/login")
async def login(login_data: dict):
    username = login_data.get("username", "").strip()
    password = login_data.get("password", "").strip()
    
    if not username or not password:
        raise HTTPException(status_code=400, detail="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
    
    user = next((u for u in db.users if u["username"] == username and u["password"] == password), None)
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    return {
        "access_token": f"token-{user['id']}-{time.time()}",
        "token_type": "bearer",
        "username": user["username"]
    }

# WebSocket endpoint
@app.websocket("/ws/chat")
async def websocket_endpoint(websocket: WebSocket):
    print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
    
    await manager.connect(websocket)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = {
            "username": "System",
            "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ PetShop!",
            "type": "info",
            "timestamp": time.time()
        }
        await websocket.send_text(json.dumps(welcome_msg))
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await asyncio.wait_for(websocket.receive_text(), timeout=300.0)
                
                try:
                    message_data = json.loads(data)
                    username = message_data.get("username", "–ì–æ—Å—Ç—å").strip()
                    message = message_data.get("message", "").strip()
                    
                    if message:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        chat_message = {
                            "username": username,
                            "message": message,
                            "timestamp": time.time(),
                            "type": "message"
                        }
                        db.messages.append(chat_message)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                        broadcast_msg = json.dumps(chat_message)
                        await manager.broadcast(broadcast_msg)
                        
                except json.JSONDecodeError:
                    error_msg = {
                        "username": "System",
                        "message": "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
                        "type": "error",
                        "timestamp": time.time()
                    }
                    await websocket.send_text(json.dumps(error_msg))
                    
            except asyncio.TimeoutError:
                # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                try:
                    ping_msg = {"type": "ping", "timestamp": time.time()}
                    await websocket.send_text(json.dumps(ping_msg))
                except:
                    break
                    
    except WebSocketDisconnect:
        print("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
    finally:
        manager.disconnect(websocket)

# –¢–µ—Å—Ç–æ–≤—ã–µ endpoints
@app.get("/health")
async def health_check():
    return {
        "status": "ok",
        "websocket_connections": len(manager.active_connections),
        "total_messages": len(db.messages),
        "total_users": len(db.users),
        "total_products": len(db.products)
    }

@app.get("/chat/messages")
async def get_chat_messages(limit: int = 20):
    return db.messages[-limit:]

@app.get("/test/ws")
async def test_websocket():
    return {"message": "WebSocket endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É ws://127.0.0.1:8000/ws/chat"}

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ PetShop —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìç WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ: ws://127.0.0.1:8000/ws/chat")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://127.0.0.1:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000, ws_ping_interval=20, ws_ping_timeout=20)